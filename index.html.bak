<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prūšu receptes</title>
    <link rel="stylesheet" href="awesomplete.css">
    <link rel="stylesheet" href="awesomplete.base.css">
    <script src="awesomplete.min.js"></script>
    <script src="awesomplete.js"></script>

    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #e0e0e0;
            color: #333;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            box-sizing: border-box;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        header {
            text-align: center;
            margin-bottom: 20px;
        }

        .section-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }

        .randomizer-section,
        .recipe-input-section {
            width: 48%;
            padding: 20px;
            box-sizing: border-box;
            margin-bottom: 20px;
            background-color: #fafafa;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
		.recipe-list-section {
            width: 100%;
            padding: 20px;
            box-sizing: border-box;
            margin-bottom: 20px;
            background-color: #fafafa;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        h1, h2, h3 {
            text-align: center;
            color: #555;
        }

        table {
            width: 100%;
        }

        .ingredient-checkbox,
        .step-checkbox {
            transform: scale(1.5);
            margin-right: 8px;
            height: auto;
			margin-bottom: 0;
			width: auto;
			padding: 0;
        }

        button {
            display: block;
            margin-top: 10px;
            background-color: #4caf50;
            color: #fff;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 16px;
			transition: background-color 0.3s;
        }

        button:hover {
            background-color: #45a049;
        }
		
		.ingredient-input {
            width: 60%;
            margin-right: 10%;
            box-sizing: border-box;
        }

        .step-input {
            width: 87%;
            margin-right: 3%;
            box-sizing: border-box;
        }

        .quantity-input {
            width: 30%;
            margin-right: 10%;
            box-sizing: border-box;
        }

        input {
            height: 30px;
            margin-bottom: 10px;
            width: calc(100% - 20px);
            padding: 5px 10px;
            box-sizing: border-box;
        }

        #recipe-list-table {
            width: 100%;
            border-collapse: collapse;
        }

        #recipe-list-table td {
            border: 1px solid #ddd;
            text-align: left;
            position: relative;
            width: 50%;
            padding: 10px;
            box-sizing: border-box;
        }

        #recipe-list-table td span.remove-button {
            position: absolute;
            top: 50%;
            right: 5px;
            cursor: pointer;
            transform: translateY(-50%);
        }

        .remove-button {
			box-sizing: border-box;
			cursor: pointer;
        }

        .list_checkbox {
            height: 40px;
            margin: auto;
        }

        button.add-button {
            background-color: #3498db;
    color: #fff;
    border: none;
    padding: 5px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s;
	margin: auto;
        }

        button.lielapoga {
            width: 100%;
        }

        button.add-button:hover {
            background-color: #2980b9;
        }
    </style>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const inputs = document.querySelectorAll('.awesomplete');
            inputs.forEach(input => {
                const awesomplete = new Awesomplete(input, {
                    minChars: 1,
                    list: []
                });
                updateAwesompleteList(awesomplete);
            });

            // Initialize recipes from local storage
            recipes = getRecipesFromStorage();
            recipes = recipes.filter(recipe => !recipe.test);

            // Display the initial recipe list
            displayRecipeList();
			
			// Add 3 ingredient rows
    for (let i = 0; i < 2; i++) {
        addRow('ingredients-table');
    }

    // Add 3 step rows
    for (let i = 0; i < 2; i++) {
        addRow('steps-list');
    }
        });

        function updateAwesompleteList(awesomplete) {
            awesomplete.list = getUniqueIngredients();
        }

        const recipesKey = 'prusu_recipes';

        function getUniqueIngredients() {
            const allIngredients = recipes.reduce((acc, recipe) => [...acc, ...recipe.ingredients], []);
            return [...new Set(allIngredients)];
        }

        function getRecipesFromStorage() {
            const storedRecipes = localStorage.getItem(recipesKey);
            return storedRecipes ? JSON.parse(storedRecipes) : [];
        }

        function saveRecipesToStorage(recipes) {
            localStorage.setItem(recipesKey, JSON.stringify(recipes));
        }

        let recipes = getRecipesFromStorage();

        function displayRecipeList() {
            const recipeListTable = document.getElementById("recipe-list-table");

            if (recipeListTable) {
                // Clear existing table content
                recipeListTable.innerHTML = "";

                // Sort recipes alphabetically
                const sortedRecipes = recipes.slice().sort((a, b) => a.title.localeCompare(b.title));

                // Determine the number of rows per column
                const rowsPerColumn = 15;

                // Calculate the number of columns needed
                const numColumns = 2; // Fixed to two columns

                // Calculate the number of rows needed
                const numRows = Math.ceil(sortedRecipes.length / numColumns);

                // Create the table structure
                for (let i = 0; i < numRows; i++) {
                    const row = recipeListTable.insertRow();
                    for (let j = 0; j < numColumns; j++) {
                        const cell = row.insertCell();
                        cell.innerHTML = "&nbsp;"; // Add a non-breaking space to ensure the cell is not collapsed
                    }
                }

                // Populate the table with recipe data
                for (let i = 0; i < sortedRecipes.length; i++) {
                    const recipe = sortedRecipes[i];
                    const rowIdx = i % numRows;
                    const colIdx = Math.floor(i / numRows);

                    const cell = recipeListTable.rows[rowIdx].cells[colIdx];
                    cell.innerHTML = `<span>${recipe.title}</span> <span class="remove-button" onclick="deleteRecipe(${i})">❌</span>`;

                    // Check if we need to add a new row
                    if (i + 1 === numRows && i < sortedRecipes.length - 1) {
                        const newRow = recipeListTable.insertRow();
                        for (let j = 0; j < numColumns; j++) {
                            const newCell = newRow.insertCell();
                            newCell.innerHTML = "&nbsp;";
                        }
                    }
                }
            }
        }

        function addRow(tableId) {
            const table = document.getElementById(tableId);

            if (table) {
                if (tableId === 'ingredients-table') {
                    const newRow = table.insertRow();
                    const cell1 = newRow.insertCell(0);
                    const cell2 = newRow.insertCell(1);

                    const inputIngredient = document.createElement("input");
                    inputIngredient.type = "text";
                    inputIngredient.classList.add("ingredient-input", "awesomplete");
                    inputIngredient.placeholder = "Sastāvdaļa";

                    const inputQuantity = document.createElement("input");
                    inputQuantity.type = "text";
                    inputQuantity.classList.add("quantity-input");
                    inputQuantity.placeholder = "Daudzums";

                    cell1.appendChild(inputIngredient);
                    cell2.appendChild(inputQuantity);

                    const removeButton = document.createElement("span");
                    removeButton.textContent = "❌";
                    removeButton.classList.add("remove-button");
                    removeButton.onclick = function () {
                        removeRow(tableId, newRow.rowIndex);
                    };

                    newRow.appendChild(removeButton);
                } else if (tableId === 'steps-list') {
                    const tbody = table.querySelector("tbody");

                    if (tbody) {
                        const tr = document.createElement("tr");
                        const td = document.createElement("td");

                        const inputStep = document.createElement("input");
                        inputStep.type = "text";
                        inputStep.classList.add("step-input");
                        inputStep.placeholder = "Soļa apraksts";

                        td.appendChild(inputStep);

                        const removeButton = document.createElement("span");
                        removeButton.textContent = "❌";
                        removeButton.classList.add("remove-button");
                        removeButton.onclick = function () {
                            removeRow(tableId, tr.rowIndex);
                        };

                        td.appendChild(removeButton);
                        tr.appendChild(td);

                        tbody.appendChild(tr);
                    }
                }
            }
        }

        function removeRow(tableId, rowIndex) {
            const table = document.getElementById(tableId);

            if (table && rowIndex > 0) {
                table.deleteRow(rowIndex);
            }
        }

        function removeTestRecipes() {
            recipes = recipes.filter(recipe => !recipe.test);
            saveRecipesToStorage(recipes);
            displayRecipeList();
        }

        function generateRecipe() {
            const ingredient1 = document.getElementById("ingredient1").value;
            const ingredient2 = document.getElementById("ingredient2").value;
            const ingredient3 = document.getElementById("ingredient3").value;

            const matchingRecipes = recipes.filter(recipe => {
                const ingredients = recipe.ingredients.map(ingredient => ingredient.toLowerCase());
                return !ingredient1 && !ingredient2 && !ingredient3 ||
                    ingredients.includes(ingredient1.toLowerCase()) ||
                    ingredients.includes(ingredient2.toLowerCase()) ||
                    ingredients.includes(ingredient3.toLowerCase());
            });

            const resultDiv = document.getElementById("result");

            if (matchingRecipes.length > 0) {
                const randomRecipe = matchingRecipes[Math.floor(Math.random() * matchingRecipes.length)];
                showRecipeDetails(randomRecipe, resultDiv);
            } else {
                resultDiv.innerHTML = `<p>Ar šīm sastāvdaļām recepšu vēl nav.</p>`;
            }
        }

        function showRecipeDetails(recipe) {
            const resultDiv = document.getElementById("result");

            if (resultDiv) {
                resultDiv.innerHTML = `<p style="text-align: center; font-weight: bold;">${recipe.title}</p>`;

                // Display ingredients
                resultDiv.innerHTML += `<p style="text-align: center;"><strong>Sastāvdaļas:</strong></p>`;
                for (let i = 0; i < recipe.ingredients.length; i++) {
                    const ingredient = recipe.ingredients[i];
                    const quantity = recipe.ingredientsQuantities ? recipe.ingredientsQuantities[i] : null;
                    resultDiv.innerHTML += `<div class="list_checkbox"><input type="checkbox" class="ingredient-checkbox" onchange="toggleStrikethrough(this)"> ${ingredient}${quantity ? `, ${quantity}` : ''}</div>`;
                }

                // Display steps
                resultDiv.innerHTML += `<p style="text-align: center;"><strong>Pagatavošanas soļi:</strong></p>`;
                for (let i = 0; i < recipe.steps.length; i++) {
                    const step = recipe.steps[i];
                    resultDiv.innerHTML += `<div div class="list_checkbox"><input type="checkbox" class="step-checkbox" onchange="toggleStrikethrough(this)"> ${step}</div>`;
                }
            }
        }

        function addRecipe(event) {
            event.preventDefault();

            const newTitleElement = document.getElementById("new-title");
            const newIngredientsElement = document.getElementById("ingredients-table");
            const newStepsElement = document.getElementById("steps-list");

            let newTitle = "";
            const newIngredients = [];
            const newIngredientsQuantities = [];
            const newSteps = [];

            // Get new title
            if (newTitleElement) {
                newTitle = newTitleElement.value;
            } else {
                alert("Aizpildi visus laukus");
                return;
            }

            // Get new ingredients and quantities
            const ingredientInputs = newIngredientsElement.querySelectorAll('.ingredient-input');
            const quantityInputs = newIngredientsElement.querySelectorAll('.quantity-input');

            ingredientInputs.forEach((input, index) => {
                const value = input.value.trim();
                if (value) {
                    newIngredients.push(value);

                    // Gather quantity values based on the index
                    const quantityInput = quantityInputs[index];
                    const quantityValue = quantityInput ? quantityInput.value.trim() : null;
                    newIngredientsQuantities.push(quantityValue);
                }
            });

            // Get new steps
            const stepInputs = newStepsElement.querySelectorAll('.step-input');
            stepInputs.forEach(input => {
                const value = input.value.trim();
                if (value) newSteps.push(value);
            });

            // Check if required fields are filled
            if (!newTitle || newIngredients.length === 0 || newSteps.length === 0) {
                alert("Aizpildi visus laukus");
                return;
            }

            // Add the new recipe to the recipes array
            recipes.push({
                title: newTitle,
                ingredients: newIngredients,
                ingredientsQuantities: newIngredientsQuantities,
                steps: newSteps
            });

            // Clear input fields
            newTitleElement.value = '';

            // Clear ingredient input fields
            const ingredientInputsArray = Array.from(ingredientInputs);
            ingredientInputsArray.forEach(input => {
                input.value = '';
            });

            // Clear quantity input fields
            const quantityInputsArray = Array.from(quantityInputs);
            quantityInputsArray.forEach(input => {
                input.value = '';
            });

            // Clear step input fields
            const stepInputsArray = Array.from(stepInputs);
            stepInputsArray.forEach(input => {
                input.value = '';
            });

            // Save recipes to local storage
            saveRecipesToStorage(recipes);

            // Display the updated recipe list
            displayRecipeList();

            alert("Recepte veiksmīgi pievienota!");
        }

        function toggleStrikethrough(checkbox) {
            const listItem = checkbox.parentNode;
            if (checkbox.checked) {
                listItem.style.textDecoration = "line-through";
            } else {
                listItem.style.textDecoration = "none";
            }
        }

        function deleteRecipe(index) {
            recipes.splice(index, 1);
            saveRecipesToStorage(recipes);
            displayRecipeList();
        }

        // Adding test recipes
        recipes.push({
            title: "Rīsi ar olām",
            ingredients: ["Rīsi", "Olas", "Panna"],
            ingredientsQuantities: ["200g", "2", "1 šķīvis"],
            steps: ["Uzvāri rīsus", "Liec pannā", "Pievieno olas un sacep visu"],
            test: true
        });

        recipes.push({
            title: "Pelmeņi ar sinepēm",
            ingredients: ["Pelmeņi", "Sinepes"],
            ingredientsQuantities: ["500g", "1 ēd.k.", null],
            steps: ["Uzvāri pelmeņus", "Pievieno sinepes", "Labu apetīti!"],
            test: true
        });

        saveRecipesToStorage(recipes);
        displayRecipeList();
    </script>
</head>
<body>
    <div class="container">
        <header>
            <h1>Prūšu receptes</h1>
        </header>

        <div class="section-container">
            <div class="randomizer-section">
                <h2>Atrast recepti</h2>
                <input type="text" placeholder="Sastāvdaļa, ko vēlies izmantot" id="ingredient1" class="awesomplete" data-list="" style="width: 100%;"><br>

                <input type="text" placeholder="Sastāvdaļa, ko vēlies izmantot" id="ingredient2" class="awesomplete" data-list="" style="width: 100%;"><br>

                <input type="text" placeholder="Sastāvdaļa, ko vēlies izmantot" id="ingredient3" class="awesomplete" data-list="" style="width: 100%;"><br>

                <button class="lielapoga" onclick="generateRecipe()">Atrast recepti</button>
                <div id="result"></div>
            </div>

            <div class="recipe-input-section">
                <h2>Pievienot jaunu recepti</h2>
                <form onsubmit="addRecipe(event)">
                    <input type="text" placeholder="Nosaukums" id="new-title" style="width: 100%;" required>

                    <div id="ingredients-section">
                        <h3>Sastāvdaļas:</h3>
                        <table id="ingredients-table">
                            <tr>
                                <td><input type="text" class="ingredient-input awesomplete" placeholder="Sastāvdaļa"></td>
                                <td><input type="text" class="quantity-input" placeholder="Daudzums"></td>
                            </tr>
                        </table>
                        <button type="button" class="add-button" onclick="addRow('ingredients-table')">Jauna rinda</button>
                    </div>

                    <div id="steps-section">
                        <h3>Pagatavošanas soļi:</h3>
                        <table id="steps-list">
							<tr>
								<td><input type="text" class="step-input" placeholder="Soļa apraksts"></td>
							</tr>
                        </table>
                        <button type="button" class="add-button" onclick="addRow('steps-list')">Jauna rinda</button>
                    </div>

                    <button class="lielapoga" type="submit">Pievienot recepti</button>
                </form>
            </div>

            <div class="recipe-list-section">
                <h2>Recepšu saraksts</h2>
                <table id="recipe-list-table">
        <!-- Table content will be dynamically added here -->
    </table>
            </div>
        </div>
    </div>
</body>
</html>
